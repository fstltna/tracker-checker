#!/usr/bin/perl

use strict;
use warnings;
#use IO::Socket::PortState qw(check_ports);
use Time::Piece;
use Net::Telnet;

my $VERSION = "1.1";
my $HOME = $ENV{HOME};
my $TRACKERSFILE = "$HOME/.trackers";
my @Trackers = ();
my $timeout=5;
my $CurPort=0;
my $DEBUG = "off";	# Set to "on" to enable
my $WebFile = "/var/www/html/TrackerOutput.html";
my $FileVersion = "";

my $WebHeader = <<'END_MESSAGE';
<html>
<head>
</head>
<body>
<center><img src="/images/TorrentClub_Logo.png"></center>
<title>Active Trackers in our list</title>
<h1 align=center>Active Trackers in our list</h1>
<hr>
<table border=2>
<tr><td><b>Protocol</b></td><td><b>Host</b></td><td><b>Port</b></td><td><b>Status</b></td></tr>
END_MESSAGE

open(FH, '>', $WebFile) or die $!;
print FH "$WebHeader\n";

print "tracker checker v$VERSION\n";
print "=========================\n";

my $CurrentTracker = "";

print "Updating $HOME/.trackers:\n";
system("/root/tracker-checker/updatetrackers \>/dev/null");

sub attemptTelnetCheck {
    my ($host, $port) = @_;

    my $t = new Net::Telnet(
        Errmode => 'return',
        Timeout => 2,
        Port    => $port
    );
    my $r = $t->open($host);
    if (defined $r) {
        $t->close();
        if ($DEBUG eq "on")
	{
        	print("$host : SUCCESS!\n");
	}
	return("SUCCESS");
    } else {
        if ($DEBUG eq "on")
	{
        	print("$host : failure. " . $t->errmsg() . "\n");
	}
	return("FAIL");
    }
}

my $SawVersion = "";
my $NumTrackers = 0;
open my $file, '<', $TRACKERSFILE or die("Unable to open tracker file: $!");
while(<$file>)
{
	my $CurLine = $_;
	chop($CurLine);
	if ($CurLine eq "")
	{
		next;
	}
	if ($SawVersion eq "")
	{
		print "File version: $CurLine\n";
		$FileVersion = $CurLine;
		$SawVersion = "true";
	}
	else
	{
		#print "Saw tracker: $CurLine\n";
		push (@Trackers, $CurLine);
		$NumTrackers += 1;
	}
}
close $file;

print "Saw $NumTrackers trackers\n";

sub CheckTracker
{
	my %port_hash = (
		tcp => {
			$CurPort => {},
		}
	);

	my $TrackerProtocol = "";
	my $StrippedString = "";

	if (substr($CurrentTracker, 0, 4) eq "http")
	{
		$TrackerProtocol = "http";
		$StrippedString = substr($CurrentTracker, 7);
	}
	elsif (substr($CurrentTracker, 0, 3) eq "udp")
	{
		if ($DEBUG eq "on")
		{
			print "Saw udp line\n";
		}
		$TrackerProtocol = "udp";
		$StrippedString = substr($CurrentTracker, 6);
		if ($DEBUG eq "on")
		{
			print "stripped: $StrippedString\n";
		}
	}
	$StrippedString = substr($StrippedString, 0, -9);
	print "tracker: $StrippedString - ";

	my ($CurHost, $CurPort)  = split(':', $StrippedString);
	# ZZZ
	my $CurStatus = attemptTelnetCheck($CurHost, $CurPort);
	print "$CurStatus\n";
	print FH "<tr><td>$TrackerProtocol</td><td>$CurHost</td><td>$CurPort</td><td>$CurStatus</td></tr>\n";
	if ($DEBUG eq "on")
	{
		my $HostTable = sprintf("%-30s : %-5s : %s", $CurHost, $CurPort, $CurStatus);
		print "$HostTable\n";
	}
}

foreach (@Trackers)
{
	$CurrentTracker = $_;
	if ($DEBUG eq "on")
	{
		print "Checking tracker: $CurrentTracker\n";
	}
	CheckTracker();
}

my $date = localtime->strftime('%m/%d/%Y %H:%M:%S');
print FH "</table>\n";
print FH "Add your tracker <a href=\"https://mytorrent.retro-os.live/index.php/forum/tracker-submission\">link here</a> - To get our linux torrent tools download <a href=\"/index.php/downloads/download/8-tools/56-torrent-tools-1-1\">this file</a>.<hr>\n";
print FH "List updated: $date - File version: $FileVersion\n";
print FH "</body>\n</html>\n";
close (FH);
exit 0;
